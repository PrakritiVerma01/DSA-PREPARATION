
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};



class Solution{
  public:
    
    Node* mergeSort(Node* head) {
        if(head==NULL || head->next==NULL) return head;
        Node* mid = findMid(head);
        Node* left = head;
        Node* right = mid->next;
        mid->next=NULL;
        left = mergeSort(left);
        right = mergeSort(right);
        
        Node* ans = merge(left , right);
        return ans;
        
    }
    public:
    Node* findMid(Node* head)
    {
        Node* slow = head;
        Node* fast = head->next;
        while(fast!=NULL && fast->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
public: 
      Node* merge(Node* left , Node* right)
    {
        Node* temp1 = left;
        Node* temp2 = right;
        Node* dumy = new Node(-1);
        Node* temp3 = dumy;
        while(temp1!=NULL && temp2!=NULL)
        {
            if(temp1->data<temp2->data)
            {
                Node* n1 = new Node(temp1->data);
                temp3->next = n1;
                temp3 = n1;
                temp1=temp1->next;
            }
            else
            {
                Node* n1 = new Node(temp2->data);
                temp3->next = n1;
                temp3 = n1;
                temp2=temp2->next;
            }
        }
        while(temp1!=NULL)
        {
            Node* n1 = new Node(temp1->data);
                temp3->next = n1;
                temp3 = n1;
                temp1=temp1->next;
        }
         while(temp2!=NULL)
        {
            Node* n1 = new Node(temp2->data);
                temp3->next = n1;
                temp3 = n1;
                temp2=temp2->next;
        }
        return dumy->next;
    }
};




void printList(Node* node) {
    while (node != NULL) {
        printf("%d ", node->data);
        node = node->next;
    }
    printf("\n");
}

void push(struct Node** head_ref, int new_data) {
    Node* new_node = new Node(new_data);

    new_node->next = (*head_ref);
    (*head_ref) = new_node;
}

int main() {
    long test;
    cin >> test;
    while (test--) {
        struct Node* a = NULL;
        long n, tmp;
        cin >> n;
        for (int i = 0; i < n; i++) {
            cin >> tmp;
            push(&a, tmp);
        }
        Solution obj;
        a = obj.mergeSort(a);
        printList(a);
    }
    return 0;
}
/